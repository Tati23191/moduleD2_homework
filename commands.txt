from News.models import *

1.Создать двух пользователей (с помощью метода User.objects.create_user).
>>> user1 = User.objects.create(username='Tanya', first_name='More')
>>> Author.objects.create(authorUser=user1)
>>> user2 = User.objects.create(username='Mia', first_name='Pronina')
>>> Author.objects.create(authorUser=user2)


2.Создать два объекта модели Author, связанные с пользователями.
>>> Author.objects.create(authorUser=user1)
>>> Author.objects.create(authorUser=user2)


3.Добавить 4 категории в модель Category.
>>>Category.objects.create(name='NW')
>>>Category.objects.create(name='AR')
>>>Category.objects.create(name='Sport')
>>>Category.objects.create(name='Game')


4.Добавить 2 статьи и 1 новость.
>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Mia')), categoryType='NW', title='snth title', 
text='snth text')
>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Mia')), categoryType='NW', title='snth title', 
text='snth text')
>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Tanya')), categoryType='NW', title='snth title', 
text='snth text')


5.Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
Получаем посты:
>>> p1 = Post.objects.get(pk=1)
>>> p2 = Post.objects.get(pk=2)
>>> p3 = Post.obgects.get(pk=3)

Получаем категории:
>>> c1 = Category.objects.get(name='NW')
>>> c2 = Category.objects.get(name='AR')
>>> p1.postCategory.add(c1)

Создаем связи:
>>> p1.postCategory.add(c1)
>>> p2.postCategory.add(c1, c2)
>>> p3.postCategory.add(c2) 


6.Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> Comment.objects.create(commentUser=User.objects.get(username='Mia'), commentPost=Post.objects.get(pk=1), text='comment text1')
>>> Comment.objects.create(commentUser=User.objects.get(username='Mia'), commentPost=Post.objects.get(pk=2), text='comment text2')
>>> Comment.objects.create(commentUser=User.objects.get(username='Tanya'), commentPost=Post.objects.get(pk=3), text='comment text3')
>>> Comment.objects.create(commentUser=User.objects.get(username='Tanya'), commentPost=Post.objects.get(pk=3), text='comment text4')


7.Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=2).like()
>>> Post.objects.get(pk=3).dislike()
>>> Comment.objects.get(pk=1).like()
>>> Comment.objects.get(pk=2).like()
>>> Comment.objects.get(pk=3).dislike()


8.Обновить рейтинги пользователей.
>>> Author.objects.get(authorUser=User.objects.get(username='Mia')).update_rating()  
>>> Author.objects.get(authorUser=User.objects.get(username='Tanya')).update_rating()  


9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
>>> best = Author.objects.all().order_by('-ratingAuthor').values('authorUser', 'ratingAuthor')[0] 
>>> print(best)
{'authorUser': 6, 'ratingAuthor': 14}
>>> print(User.objects.get(id='6')) 


10.Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> best_article = Post.objects.all().order_by('-rating').values('dateCreation','author_id','rating','title')[0]
>>> print(best_article)

>>> c = Post.objects.order_by('-rating').first().preview()
>>> print(c)


11.Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> d = (Post.objects.get(title ='smth title')).comment_set.all().values('rating','text','dateCreated','commentUser')
>>> print(d)











